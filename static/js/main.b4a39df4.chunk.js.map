{"version":3,"sources":["serviceWorker.js","affichpok.js","Pokechearch.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","PokemonList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleGenChange","bind","assertThisInitialized","state","pokemon","generation","setState","_this2","fetch","method","response","ok","json","results","getPokemon","pokemonList","_this$state","slice","react_default","a","createElement","affichpok_PickGeneration","onGenerationChange","className","map","monster","index","affichpok_Pokemon","key","name","id","React","Component","PickGeneration","_this3","generationClick","active","_this4","generationSingle","onClick","Pokemon","_this5","isBack","handleClick","prevState","_this6","src","concat","PokemonSearch","search","loading","bindField","value","onChange","e","target","handleSubmit","preventDefault","fetchPokemon","res","data","fetched","notFound","Container","onSubmit","Input","assign","type","Button","findByField","sprites","back_default","front_default","App","Pokechearch","affichpok","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.b4a39df4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { exportDefaultSpecifier } from '@babel/types';\n\n\n\n// The extends keyword is used in class declarations or class expressions to create a class as a child of another class\nclass PokemonList extends React.Component {\n  // A constructor method is a special method for creating and initializing an object created with a class. A class can only have one constructor. A constructor can use the super kekyword to call the constructor of a parent class.\n  constructor(props) {\n    super(props);\n    // this = super(props)\n    \n    // by default you can't access properties, state and component methods like setState from event handlers so you need to bind them. This way, my event handler has its context bound to the component instance and I can access props and state.\n    this.handleGenChange = this.handleGenChange.bind(this);\n    this.state = {\n      pokemon: [],\n      generation: \"Generation One\"\n    };\n  }\n\n  handleGenChange(generation) {\n    this.setState({ generation });\n  }\n\n  getPokemon() {\n    fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=386\", {\n      method: \"GET\"\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(json => {\n          //console.log(json.results[385].name);\n          this.setState({\n            pokemon: json.results\n          });\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getPokemon();\n  }\n\n  render() {\n    let { pokemon, generation } = this.state;\n    if (generation === \"Generation One\") {\n      pokemon = pokemon.slice(0, 151);\n    } else if (generation === \"Generation Two\") {\n      pokemon = pokemon.slice(151, 251);\n    } else {\n      pokemon = pokemon.slice(251, 386);\n    }\n\n    let pokemonList;\n    pokemonList = (\n      <div>\n        <PickGeneration onGenerationChange={this.handleGenChange} />\n        <div className=\"pokemon-container\">\n          {pokemon.map((monster, index) =>\n            <Pokemon key={monster.name} id={index + 1} pokemon={monster.name} />\n          )}\n        </div>\n      </div>\n    );\n    return <div>{pokemonList}</div>;\n  }\n}\n\nclass PickGeneration extends React.Component {\n  constructor(props) {\n    super(props);\n    this.generationClick = this.generationClick.bind(this);\n    this.state = {active: \"Generation One\"};\n  }\n  generationClick(generation) {\n    //this.setState({ generation: generation });\n    this.props.onGenerationChange(generation);\n    this.setState({active: generation});\n  }\n\n  render() {\n    const generationList = [\n      \"Generation One\",\n      \"Generation Two\",\n      \"Generation Three\"\n    ];\n    let active = this.state.active;\n    const generationSingle = generationList.map(generation =>\n      // keys help React identify which items have changed, are added or removed. Keys need to be added to elements inside the array. Elements inside the map call need keys! Two different arrays can have the same key.\n      \n      <button className={\"gen-button \" + ((active === generation)? 'button-active': '')} key={generation} onClick={() => this.generationClick(generation)}>\n        {generation}\n\n      </button>\n    );\n    return <div className=\"button-container\">{generationSingle}</div>;\n  }\n}\n\nclass Pokemon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isBack: false };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(pokemon) {\n    this.setState(prevState => ({\n      isBack: !prevState.isBack\n    }));\n  }\n  render() {\n    let pokemon = this.props.pokemon;\n\n    switch (pokemon) {\n      case \"nidoran-f\":\n        pokemon = \"nidoranf\";\n        break;\n      case \"nidoran-m\":\n        pokemon = \"nidoranm\";\n        break;\n      case \"deoxys-normal\":\n        pokemon = \"deoxys\";\n        break;\n    }\n    const id = this.props.id;\n\n    return (\n      <div\n        className=\"pokemon-single-container\"\n        onClick={() => this.handleClick(pokemon)}\n      >\n        <div>\n          <img\n            className=\"sprites\"\n            src={`http://pokestadium.com/sprites/xy/${this.state.isBack\n              ? \"back/\" + pokemon\n              : pokemon}.gif`}\n          />\n          <div className=\"align-bottom\"> {pokemon}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PokemonList;","import ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Input, Button, Container } from 'semantic-ui-react';\nserviceWorker.unregister();\n\n\n\n\n\nclass PokemonSearch extends Component {\n    state = {\n      search: '',\n      pokemon: null,\n      loading: false\n    }\n  \n    bindField = () => ({\n      value: this.state.search,\n      onChange: (e) => this.setState({ search: e.target.value })\n    })\n  \n    handleSubmit = (e) => {\n      e.preventDefault()\n      this.fetchPokemon(this.state.search)\n    }\n  \n    async fetchPokemon(id) {\n      this.setState({ loading: true })\n      const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n      const data = await res.json()\n      this.setState({ pokemon: data, loading: false })\n    }\n  \n    render() {\n      const { pokemon, loading } = this.state\n      const fetched = !loading && pokemon && pokemon.id\n      const notFound = !loading && pokemon && !pokemon.id\n  \n      return (\n        <Container>\n          <form className=\"search-bar\" onSubmit={this.handleSubmit}>\n            <Input {...this.bindField() } type=\"number\" />{' '}\n            <Button onClick={this.findByField}>Fetch Pokemon by ID</Button>\n          </form>\n  \n          {loading && (\n            <div>Loading...</div>\n          )}\n  \n          {fetched && (\n            <div>\n              <div><small>[{pokemon.id}]</small> <strong>{pokemon.name}</strong></div>\n              <div><img src={pokemon.sprites.back_default} /> <img src={pokemon.sprites.front_default} /></div>\n            </div>\n          )}\n  \n          {notFound && (\n            <div>Did not find this pokemon</div>\n          )}\n        </Container>\n      );\n    }\n  }\n  \n export default PokemonSearch;\n  ","import React, { Component } from 'react'\nimport PokemonList from './affichpok'\nimport Pokechearch from './Pokechearch'\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Pokechearch></Pokechearch>\n        <PokemonList> </PokemonList>\n      </div>\n    )\n  }\n}\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Input, Button, Container } from 'semantic-ui-react';\nimport App from './App';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}